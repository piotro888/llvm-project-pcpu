//===-- PCPUISelDAGToDAG.cpp - A dag to dag inst selector for PCPU ------===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//
//
// This file defines an instruction selector for the PCPU target.
//
//===----------------------------------------------------------------------===//

#include "PCPUAluCode.h"
#include "PCPUMachineFunctionInfo.h"
#include "PCPURegisterInfo.h"
#include "PCPUSubtarget.h"
#include "PCPUTargetMachine.h"
#include "llvm/CodeGen/MachineConstantPool.h"
#include "llvm/CodeGen/MachineFrameInfo.h"
#include "llvm/CodeGen/MachineFunction.h"
#include "llvm/CodeGen/MachineInstrBuilder.h"
#include "llvm/CodeGen/MachineRegisterInfo.h"
#include "llvm/CodeGen/SelectionDAGISel.h"
#include "llvm/IR/CFG.h"
#include "llvm/IR/GlobalValue.h"
#include "llvm/IR/Instructions.h"
#include "llvm/IR/Intrinsics.h"
#include "llvm/IR/Type.h"
#include "llvm/Support/Debug.h"
#include "llvm/Support/ErrorHandling.h"
#include "llvm/Support/raw_ostream.h"
#include "llvm/Target/TargetMachine.h"

using namespace llvm;

#define DEBUG_TYPE "PCPU-isel"
#define PASS_NAME "PCPU DAG->DAG Pattern Instruction Selection"


namespace {

class PCPUDAGToDAGISel : public SelectionDAGISel {
public:
  static char ID;

  PCPUDAGToDAGISel() = delete;

  explicit PCPUDAGToDAGISel(PCPUTargetMachine &TargetMachine)
      : SelectionDAGISel(ID, TargetMachine) {}

  bool runOnMachineFunction(MachineFunction &MF) override {
    return SelectionDAGISel::runOnMachineFunction(MF);
  }

private:
// Include the pieces autogenerated from the target description.
#include "PCPUGenDAGISel.inc"

  // Instruction Selection not handled by the auto-generated tablgen
  void Select(SDNode *N) override;

  // Support functions for the opcodes of Instruction Selection
  // not handled by the auto-generated tablgen
  void selectFrameIndex(SDNode *N);
};

} // namespace

char PCPUDAGToDAGISel::ID = 0;

// Select instructions not customized! Used for
// expanded, promoted and normal instructions
void PCPUDAGToDAGISel::Select(SDNode *Node) {
  unsigned Opcode = Node->getOpcode();

  // If we have a custom node, we already have selected!
  if (Node->isMachineOpcode()) {
    LLVM_DEBUG(errs() << "== "; Node->dump(CurDAG); errs() << "\n");
    return;
  }

  // Instruction Selection not handled by the auto-generated tablegen selection
  // should be handled here.

  // TODO: Select FrameIndeximm
  EVT VT = Node->getValueType(0);
  switch (Opcode) {
  case ISD::FrameIndex:
    selectFrameIndex(Node);
    return;
  default:
    break;
  }

  // Select the default instruction
  SelectCode(Node);
}

void PCPUDAGToDAGISel::selectFrameIndex(SDNode *Node) {
  SDLoc DL(Node);
  SDValue Imm = CurDAG->getTargetConstant(0, DL, MVT::i32);
  int FI = cast<FrameIndexSDNode>(Node)->getIndex();
  EVT VT = Node->getValueType(0);
  SDValue TFI = CurDAG->getTargetFrameIndex(FI, VT);
  unsigned Opc = PCPU::ADI;
  if (Node->hasOneUse()) {
    CurDAG->SelectNodeTo(Node, Opc, VT, TFI, Imm);
    return;
  }
  ReplaceNode(Node, CurDAG->getMachineNode(Opc, DL, VT, TFI, Imm));
}

// createPCPUISelDag - This pass converts a legalized DAG into a
// PCPU-specific DAG, ready for instruction scheduling.
FunctionPass *llvm::createPCPUISelDag(PCPUTargetMachine &TM) {
  return new PCPUDAGToDAGISel(TM);
}
